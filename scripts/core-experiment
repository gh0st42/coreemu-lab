#!/bin/bash

fn_exists() { declare -F "$1" > /dev/null; }

print_log() {
    LOG_LEVEL=$1
    shift
    TS=$(date)
    echo "$TS | $LOG_LEVEL | $@" 
    #| tee /shared/simulation.log
}

panic() {
    LOG_LEVEL=ERROR
    shift
    TS=$(date)
    echo "$TS | $LOG_LEVEL | $@" 
    #| tee /shared/simulation.log
    exit -1
}

if [ "$#" -ne 1 ]
then
  echo "Usage: $0 <experiment config>"
  exit 1
fi

BASEDIR=$(dirname $1)

NAME=experiment
MONITOR_PIDSTAT=0
MONITOR_NET=0

NOW=$(date +%s)

CONFIG=$1
. $CONFIG

RESULTS_DIR=$BASEDIR/results-$NAME-$NOW

print_log INFO Result will be put into $RESULTS_DIR
mkdir $RESULTS_DIR || panic Could not create results directory: $RESULTS_DIR

if [ ! -f "$BASEDIR/$SCENARIO" ]; then
    panic Scenario $FILE not found.	
fi

##########################################################################
#
# General startup
#
##########################################################################

print_log INFO Starting $BASEDIR/$SCENARIO
core-cli xml -f $BASEDIR/$SCENARIO -s

if [ $GUI = 1 ]; then
    print_log INFO Attaching gui to session
    core-pygui -s 1 &
fi

if fn_exists pre ; then
    print_log INFO Found pre hook, executing it now...
    pre
fi

##########################################################################
#
# START simulation
#
##########################################################################


if [ -n "$START_EXEC" ]; then
    for CMD in "${START_EXEC[@]}"; do
        print_log INFO Executing "$CMD" on all nodes
        cea "$CMD"
    done
fi

if [ -n "$START_DAEMONIZED" ]; then
for CMD in "${START_DAEMONIZED[@]}"; do
        print_log INFO Daemonizing "$CMD" on all nodes
        cda "$CMD"
    done    
fi

if [ -n "$WARMUP" ]; then
    print_log INFO Warming up for $WARMUP seconds
    sleep $WARMUP
fi

##########################################################################
#
# Monitoring
#
##########################################################################


print_log INFO Starting monitoring services

if [ $MONITOR_PIDSTAT = 1 ]; then
    PARAMS=""
    if [ -n "$MONITOR_PIDSTAT_PARAMS" ]; then
        PARAMS=$MONITOR_PIDSTAT_PARAMS
    fi
    print_log INFO Starting pidstat monitor.. $PARAMS
    cda monitor-pidstat $PARAMS
fi

if [ $MONITOR_NET = 1 ]; then
    PARAMS=""
    if [ -n "$MONITOR_NET_PARAMS" ]; then
        PARAMS=$MONITOR_NET_PARAMS
    fi
    print_log INFO Starting net monitor.. $PARAMS
    cda monitor-net $PARAMS
fi

if [ $MONITOR_CONTACTS = 1 ]; then
    PARAMS=""
    if [ -n "$MONITOR_CONTACTS_PARAMS" ]; then
        PARAMS=$MONITOR_CONTACTS_PARAMS
    fi
    print_log INFO Starting contacts monitor.. $PARAMS
    monitor-contacts $PARAMS > $RESULTS_DIR/contacts.log &
fi

##########################################################################
#
# ALL SYSTEMS RUNNING
#
##########################################################################

print_log INFO Experiment started: $(date +%s)

##########################################################################
#
# STOP simulation
#
##########################################################################

if [ -n "$RUNTIME" ]; then
    print_log INFO Experiment will run for $RUNTIME seconds
    sleep $RUNTIME
else
    print_log INFO Experiment will run until stopped through /shared/shutdown.txt
    while [ ! -f /shared/shutdown.txt ]
    do
        sleep 1
    done 
    print_log INFO Got shutdown signal!
    rm /shared/shutdown.txt
fi

print_log INFO Experiment finished: $(date +%s)

if [ -n "$SHUTDOWN_PROCS" ]; then
    print_log INFO Stopping user services: $SHUTDOWN_PROCS
    killall $SHUTDOWN_PROCS 2>&1 > /dev/null
fi

print_log INFO Stopping monitoring services 
killall bwm-ng pidstat monitor-contacts 2>&1 > /dev/null

print_log INFO Collecting *.log from all nodes 

if fn_exists post ; then
    print_log INFO Found post hook, executing it now...
    post $RESULTS_DIR
fi

if [ $MONITOR_PIDSTAT = 1 ]; then
    print_log INFO Preprocessing pidstat logs
    cea 'cat pidstat-$(hostname).log | grep "^# " | head -n1 | cut -c 3- > pidstat-$(hostname).csv.log && cat pidstat-$(hostname).log | grep "^1" >> pidstat-$(hostname).csv.log'
fi

print_log INFO Collecting data 
for i in $(fdfind .log /tmp/pycore.1/*.conf )
do         
    NODE_NAME=$(echo $i | cut -d "/" -f 4- | cut -d "." -f 1)


    print_log INFO Copying $i to $RESULTS_DIR/$NODE_NAME
    if [ ! -d "$RESULTS_DIR/$NODE_NAME" ]; then
        mkdir $RESULTS_DIR/$NODE_NAME
    fi
    cp $i $RESULTS_DIR/$NODE_NAME
done

if fn_exists analyze ; then
    print_log INFO Found analyze hook, executing it now...
    analyze $RESULTS_DIR
fi

print_log INFO Analyzing data 
if [ $MONITOR_PIDSTAT = 1 ]; then
    if [ -n "$MONITOR_PIDSTAT_PARAMS" ]; then
        print_log INFO Plotting pidstat logs
        plot-pidstat.py $RESULTS_DIR RSS $MONITOR_PIDSTAT_PARAMS "Size in MB" "Nodes"
        plot-pidstat.py $RESULTS_DIR VSZ $MONITOR_PIDSTAT_PARAMS "Size in MB" "Nodes"
        plot-pidstat.py $RESULTS_DIR CPU $MONITOR_PIDSTAT_PARAMS "CPU usage" "Nodes"
    fi
fi


##########################################################################
#
# AFTER
#
##########################################################################


print_log INFO Deleting session
core-cli session -i 1 delete
